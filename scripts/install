#!/usr/bin/env node
'use strict';

const ora = require('ora');
const inquirer = require('inquirer');
const installHelpers = require('./lib/install');
const ArgParser = require('../app/argparser');
const prepare = require('./prepare');
const run = require('../tools/run');

const args = new ArgParser(`
Reminder App installation script.
This script installs reminder-app, and also gives you and
option to start it on machine startup.
`);

args.add('--port', { type: 'number', alias: '-p',
  help: 'Specify port for reminder-app to start on' });
args.add('--startup', { type: 'boolean', alias: '-s',
  help: 'Makes reminder-app start on' });
args.add('--non-interactive', { type: 'boolean', dest: 'nonInteractive',
  help: 'Disables interactive prompts, mostly used in CI' });
args.parse();

const spinner = new ora({
  spinner: 'dots5',
  text: 'Installing reminder-app'
});

spinner.start();
process.env.NODE_ENV = 'production';
process.env.PORT = process.env.PORT || 7000;

const { opts, ignore } = installHelpers;

async function startup() {
  console.log();
  try {
    await run('node scripts/init-startup', opts);
  } catch(e) {
    console.error('Setting up startup failed!');
  }
}

async function prompt_init_startup() {
  if (args.startup) {
    await startup();
    return;
  }

  if (args.nonInteractive) {
    return;
  }

  const prompt = [{
    type: 'confirm',
    name: 'startup',
    message: 'Start reminder-app on machine startup (can later be setup using scripts/init-setup)',
    default: false
  }];

  const response = await inquirer.prompt(prompt);
  if (response.startup) {
    await startup();
  }
}

// running this install script twice and when
// a production server is using leveldb will cause error
// when running migrations so if the app is running we pre-quit.
async function ensure_not_installed() {
  let isAppRunning = true;
  try {
    await run('npx pm2 describe reminder-app', ignore);
  } catch (e) {
    isAppRunning = false;
  }

  if (isAppRunning) {
    spinner.fail('reminder-app is already installed and running.');
    console.error();
    console.error('reminder-app is already installed re-running this script');
    console.error('will just cause error when running migrations on database; since the database');
    console.error('will already be in use by the app running.');
    process.exit(1);
  }
}

// logic that installs reminder-app
async function install_reminder_app() {
  await ensure_not_installed();

  const pm2Installed = await installHelpers.isPm2Installed();
  if (pm2Installed) {
    await run('pm2 save', ignore);
  }

  await prepare(spinner, {
    runPm2Save: pm2Installed
  });

  await installHelpers.prompt_for_port(args);

  spinner.text = 'Starting reminder-app using pm2';
  spinner.color = 'cyan';
  await run('npx pm2 start app --name reminder-app', ignore);
}

install_reminder_app()
  .then(() => spinner.succeed('Reminder App Installed Sucessfully!'))
  .then(prompt_init_startup)
  .catch(err => installHelpers.printError(err, spinner));
