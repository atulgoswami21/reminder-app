#!/usr/bin/env node
'use strict';

const path = require('path');
const ora = require('ora');
const inquirer = require('inquirer');
const prepare = require('./prepare');
const run = require('../tools/run');

const spinner = new ora({
  spinner: 'dots5',
  text: 'Installing reminder-app'
});

const opts = {
  cwd: path.resolve(__dirname, '../'),
  silent: true
};

const ignore = {
  ...opts, stdio: 'ignore'
};

spinner.start();
process.env.NODE_ENV = 'production';
process.env.PORT = process.env.PORT || 7000;

async function isPm2Installed() {
  let isInstalled = true;
  try {
    await run('pm2 --help', ignore);
  } catch(e) {
    isInstalled = false;
  }

  return isInstalled;
}

async function prompt_for_port() {
  const prompts = [{
    type: 'input',
    name: 'port',
    message: 'Select a port for reminder-app to run on',
    default: process.env.PORT,
    validate(input) {
      const port = Number(input);
      if (isNaN(port)) {
        throw Error('Port should be a valid number!');
      }

      if (port < 0 || port > 65536) {
        throw Error('A valid port is greater than 0 and less than 65536!');
      }

      return true;
    }
  }];

  const response = await inquirer.prompt(prompts);
  process.env.PORT = response.port;
}

async function install_reminder_app() {
  const pm2Installed = await isPm2Installed();
  if (pm2Installed) {
    await run('pm2 save', ignore);
  }

  await prepare(spinner, {
    runPm2Save: pm2Installed
  });

  await prompt_for_port();

  spinner.text = 'Starting reminder-app using pm2';
  spinner.color = 'cyan';
  await run('npx pm2 start app --name reminder-app', ignore);
}

function printError(err) {
  spinner.fail('Oh no! Installation failed, see the traceback below for more info.');
  console.error('You can open issue at the github repo for support.');
  console.error('');
  console.error(err);
}

async function prompt_init_startup() {
  const prompt = [{
    type: 'confirm',
    name: 'startup',
    message: 'Start reminder-app on machine startup (can later be setup using scripts/init-setup)',
    default: false
  }];

  const response = await inquirer.prompt(prompt);

  console.log();
  if (response.startup) {
    try {
      await run('node scripts/init-startup', opts);
    } catch(e) {
      console.error('Setting up startup failed!');
    }
  }
}

install_reminder_app()
  .then(() => spinner.succeed('Reminder App Installed Sucessfully!'))
  .then(prompt_init_startup)
  .catch(err => printError(err));
